generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleType {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
}

model Role {
  id       String        @id @default(uuid())
  name     RoleType      @unique
  accounts AccountRole[]
}

model Account {
  id       String        @id @default(uuid())
  email    String        @unique
  password String
  user     User?
  roles    AccountRole[]
}

model AccountRole {
  id        String @id @default(uuid())
  accountId String
  roleId    String

  account Account @relation(fields: [accountId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id])
}

model User {
  id          String  @id @default(uuid())
  accountId   String  @unique
  name        String
  phoneNumber String?
  orders      Order[]
  cart        Cart[]
  account     Account @relation(fields: [accountId], references: [id])
}

model Category {
  id       String    @id @default(uuid())
  name     String
  isActive Boolean
  products Product[]
}

model Image {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id           String        @id @default(uuid())
  isActive     Boolean
  categoryId   String
  name         String
  price        Int
  description  String?
  images       Image[]
  category     Category      @relation(fields: [categoryId], references: [id])
  orderDetails OrderDetail[]
  stock        Int
  Cart         Cart[]
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

model Order {
  id            String        @id @default(uuid())
  customerId    String
  orderDate     DateTime      @default(now())
  totalPrice    Int
  customer      User          @relation(fields: [customerId], references: [id])
  paymentStatus PaymentStatus
  orderDetails  OrderDetail[]
}

model OrderDetail {
  id           String  @id @default(uuid())
  orderId      String
  itemId       String
  quantity     Int
  countedPrice Int
  order        Order   @relation(fields: [orderId], references: [id])
  product      Product @relation(fields: [itemId], references: [id])
}

model Cart {
  id        String  @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
